/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
        ListNode* cur=head;
        ListNode* prev=NULL;
        while(cur!=NULL)
        {
            ListNode* temp=cur->next;
            cur->next=prev;
            prev=cur;
            cur=temp;
        }
        return prev;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head->next==NULL and k==1)
        return head;
        ListNode* headref=head;
        ListNode* prev=new ListNode(-1);
        while(headref!=NULL)
        {
        ListNode* cur=headref;
        int i;
        for(i=0;i<k-1;i++) 
        {
            if(cur!=NULL) 
            cur=cur->next; 
        }
        if(i<k-1 || (i==k-1 and cur==NULL))
        {
            prev->next=headref;
            return head;
        }
        ListNode* temp=cur->next; 
        cur->next=NULL;
        ListNode* newhead=reverse(headref); 
        if(head==headref)
        {
            head=cur;
        }
        prev->next=cur;
        prev=headref; 
        headref=temp;
    }
    return head;


        
    }
};
