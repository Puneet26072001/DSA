class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int len1=nums1.size();
        int len2=nums2.size();
        int num=len1+len2;
        if(len1==0)
        {
            if(num%2!=0) return nums2[num/2];
            else
            return double(nums2[(num-1)/2]+nums2[num/2])/2;
        }
        if(len2==0)
        {
            if(num%2!=0) return nums1[num/2];
            else
            return double(nums1[(num-1)/2]+nums1[num/2])/2;
        }
        int low=0;
        int high=min(len1,len2);
        int l1,l2,r1,r2;
        while(low<=high)
        {
            int mid=(low+high)/2;
            int firstarray=mid;
            int secondarray=(num/2)-firstarray;
            if(firstarray==0)
            l1=INT_MIN;
            else
            l1=nums1[firstarray-1];
            if(secondarray==0)
            l2=INT_MIN;
            else
            l2=nums2[secondarray-1];
            if(firstarray==len1)
            r1=INT_MAX;
            else
            r1=nums1[firstarray];
            if(secondarray==len2)
            r2=INT_MAX;
            else
            r2=nums2[secondarray];
            if(l1<=r2 and l2<=r1)
            {
                if(num%2==0)
                return (max(l1,l2)+min(r1,r2))/2.0;
                else
                {
                    if(l1==INT_MIN || l2==INT_MIN)
                    return min(r1,r2);
                    if(r1==INT_MAX || r2==INT_MAX)
                    return max(l1,l2);
                }
            }
            else if(l2>r1)
            {
                low=firstarray+1;
            }
            else 
            {
                high=firstarray-1;
            }

        }
        return -1;
        
    }
};
