/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
ListNode* reverse(ListNode* head) {
        ListNode* cur=head;
        ListNode* prev=NULL;
        while(cur!=NULL)
        {
            ListNode* temp=cur->next;
            cur->next=prev;
            prev=cur;
            cur=temp;
        }
        return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head1=l1;
        ListNode* head2=l2;
        ListNode* newhead=new ListNode(-1);
        ListNode* res=newhead;
        int sum=0;
        int rem=0;
        while(head1!=NULL && head2!=NULL)
        {
            rem=((head1->val)+(head2->val)+sum)%10;
            sum=((head1->val)+(head2->val)+sum)/10;
            //cout<<rem<<endl;
            ListNode* temp=new ListNode(rem);
            newhead->next=temp;
            newhead=temp;
            head1=head1->next;
            head2=head2->next;

        }
        while(head1!=NULL)
        {
            rem=((head1->val)+sum)%10;
            sum=((head1->val)+sum)/10;
            ListNode* temp=new ListNode(rem);
            newhead->next=temp;
            newhead=temp;
            head1=head1->next;

        }
        while(head2!=NULL)
        {
            rem=((head2->val)+sum)%10;
            sum=((head2->val)+sum)/10;
            ListNode* temp=new ListNode(rem);
            newhead->next=temp;
            newhead=temp;
            head2=head2->next;

        }
        if(sum==1)
        {
            cout<<newhead->val<<endl;
            ListNode* finall=new ListNode(1);
            newhead->next=finall;
            newhead=finall;
        }

        return res->next;
    }
};
