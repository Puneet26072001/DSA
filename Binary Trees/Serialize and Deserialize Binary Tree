/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==NULL)
        return "";
        string res="";
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* parent=q.front();
            q.pop();
            if(parent==NULL)
            {
                res+="#,";
            }
            else
            {
                res+=to_string(parent->val);
                res+=",";
                q.push(parent->left);
                q.push(parent->right);

            }
        }
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0)
        return NULL;
        stringstream s(data);
        string str;
        getline(s,str,',');
        TreeNode* root=new TreeNode(stoi(str));
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* parent=q.front();
            q.pop();
            getline(s,str,',');
            if(str=="#")
            parent->left=NULL;
            else
            {
            parent->left=new TreeNode(stoi(str));
            q.push(parent->left);
            }
            getline(s,str,',');
            if(str=="#")
            parent->right=NULL;
            else
            {
            parent->right=new TreeNode(stoi(str));
            q.push(parent->right);
            }
        }
        return root;
        
    }
};
