/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
TreeNode* helperfunction(vector<int>& preorder,int prestart,int preend, vector<int>& inorder,int instart,int inend)
{
    if(prestart>preend || instart>inend)
    return NULL;
    TreeNode* root=new TreeNode(preorder[prestart]);
    int res;
    for(int i=instart;i<=inend;i++)
    {
        if(inorder[i]==preorder[prestart])
        {
            res=i;
            break;
        }
    }
    root->left=helperfunction(preorder,prestart+1,prestart+res-instart,inorder,instart,res-1);
    root->right=helperfunction(preorder,prestart+res-instart+1,preend,inorder,res+1,inend);
    return root;
}
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return helperfunction(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1);
        
    }
};
