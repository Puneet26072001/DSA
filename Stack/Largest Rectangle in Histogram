class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        stack<int> s;
        vector<int> left;
        vector<int> right;
        for(int i=0;i<heights.size();i++)
        {
            if(s.empty())
            {
                left.push_back(-1);
            }
            else if(!s.empty() and heights[s.top()]>=heights[i])
            {
                while(!s.empty() and heights[s.top()]>=heights[i])
                {
                    s.pop();
                }
                if(s.empty())
                left.push_back(-1);
                else
                left.push_back(s.top());
            }
            else if(!s.empty() and heights[s.top()]<heights[i])
            {
                left.push_back(s.top());
            }
            s.push(i);
        }
        while(!s.empty())
        s.pop();
        for(int i=heights.size()-1;i>=0;i--)
        {
            if(s.empty())
            {
                right.push_back(heights.size());
            }
            else if(!s.empty() and heights[s.top()]>=heights[i])
            {
                while(!s.empty() and heights[s.top()]>=heights[i])
                {
                    s.pop();
                }
                if(s.empty())
                right.push_back(heights.size());
                else
                right.push_back(s.top());
            }
            else if(!s.empty() and heights[s.top()]<heights[i])
            {
                right.push_back(s.top());
            }
            s.push(i);
        }
        reverse(right.begin(),right.end());
        int maxi=INT_MIN;
        for(int i=0;i<left.size();i++)
        {
            cout<<left[i]<<" "<<right[i]<<endl;
        }
        for(int i=0;i<left.size();i++)
        {
            maxi=max((right[i]-left[i]-1)*heights[i],maxi);
            cout<<(right[i]-left[i]-1)*heights[i]<<endl;
        }
        return maxi;
        
    }
};
